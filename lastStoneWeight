/*
* Last Stone Weight
We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)
*
*   My Solution - n*nlogn time, n space
*   Outtakes - use priority queue or heaps - nlogn time, n space
             - Put all elements into a priority queue.
             - Pop out the two biggest, push back the difference, until there are no more two elements left.
*/


class Solution {
    public int lastStoneWeight(int[] stones) {
        if(stones.length == 1) return stones[0];
        Integer[] stonesArr = Arrays.stream(stones)
                                .boxed()                // Stream<Integer>
                                .toArray(Integer[]::new);
        List<Integer> stonesList = Arrays.asList(stonesArr);     
        while(true){
            // Arrays.sort(stones);
            Collections.sort(stonesList, Collections.reverseOrder());
            // Integer[] newStones = stonesList.toArray();
            if(stonesList.get(0) == 0) return 0;
            if(stonesList.get(0) == stonesList.get(1)){
                stonesList.set(0,0);
                stonesList.set(1,0);
            }
            else if(stonesList.get(0) != 0 && stonesList.get(1) == 0){
                return stonesList.get(0);
            }
            else {
                stonesList.set(0,stonesList.get(0) - stonesList.get(1));
                stonesList.set(1,0);
            }
        }  
    }
}