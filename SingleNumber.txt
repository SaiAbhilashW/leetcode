class Solution {
    public int singleNumber(int[] nums) {
        /*
            There is only one number with frequency = 1, all others have frequency = 2. Find that number.


            1. store the frequency of numbers occuring in hashmap, return the number with freq 1
               O(n) in space and time
            2. traverse through the array, if currentElement doesn't appear twice return it
               O(n2) time, O(1) space.
            3. Sort the array, while traverse through it if prev != current and current != next then return next
               O(nlogn + n) time O(1) space (dependent on what sorting algo you use)
            4. 2(a+b+c) - (a+a+b+b+c) = c : find all the unique elements and add them and multiply by 2, subtract that from sum of all elements
            5. a^a = 0, a^b^a = b, ^ is xor. traverse and XOR each element 
               O(n) time and O(1) space
        */
        
        int a = 0;
        for(int i = 0; i < nums.length;i++){
            a = a ^ nums[i];
        }
        return a;
    }
}